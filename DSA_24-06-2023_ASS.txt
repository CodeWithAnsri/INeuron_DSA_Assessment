Q 1. **Merge k Sorted Lists**

You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

*Merge all the linked-lists into one sorted linked-list and return it.*

CODE_________________________________________________________________________________________________________________

import java.util.*;

public class MergeKSortedLists {

    public static ListNode mergeKLists(ListNode[] lists) {
        
        PriorityQueue<ListNode> queue = new PriorityQueue<>((a, b) -> a.val - b.val);

        for (ListNode list : lists) {
            if (list != null) {
                queue.add(list);
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        
        while (!queue.isEmpty()) {
            current.next = queue.poll();
            current = current.next;

            if (current.next != null) {
                queue.add(current.next);
            }
        }

        return dummy.next;
    }

    public static void main(String[] args) {
        ListNode[] lists = {
            new ListNode(1, new ListNode(4, new ListNode(5))),
            new ListNode(1, new ListNode(3, new ListNode(4))),
            new ListNode(2, new ListNode(6)),
        };

        ListNode mergedList = mergeKLists(lists);

        while (mergedList != null) {
            System.out.println(mergedList.val);
            mergedList = mergedList.next;
        }
    }
}



Q 2. Count of Smaller Numbers After Self**

Given an integer array `nums`, return *an integer array* `counts` *where* `counts[i]` *is the number of smaller elements to the right of* `nums[i]`.

CODE _____________________________________________________________________________________________________________________

public class CountSmallerNumbersAfterSelf {

    public static int[] countSmallerNumbersAfterSelf(int[] nums) {
        int[] counts = new int[nums.length];

       
        Stack<Integer> stack = new Stack<>();

        for (int i = nums.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[i] < stack.peek()) {
                counts[stack.pop()]++;
            }

.
            stack.push(nums[i]);
        }

        return counts;
    }

    public static void main(String[] args) {
        int[] nums = {5, 2, 6, 1};

        int[] counts = countSmallerNumbersAfterSelf(nums);

        System.out.println(Arrays.toString(counts));
    }
}


Q 3. Sort an Array**

Given an array of integers `nums`, sort the array in ascending order and return it.

You must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.

CODE________________________________________________________________________________________________________________

public class SortArray {

    public static int[] sortArray(int[] nums) {
   
        MergeSort mergeSort = new MergeSort(nums);

        mergeSort.sort();

        return nums;
    }

    public static class MergeSort {

        private int[] nums;

        public MergeSort(int[] nums) {
            this.nums = nums;
        }

        public void sort() {
            sort(0, nums.length - 1);
        }

        private void sort(int low, int high) {
            if (low < high) {
                int mid = (low + high) / 2;

                sort(low, mid);
                sort(mid + 1, high);

                merge(low, mid, high);
            }
        }

        private void merge(int low, int mid, int high) {
            int[] temp = new int[high - low + 1];

            int i = low;
            int j = mid + 1;
            int k = 0;

            while (i <= mid && j <= high) {
                if (nums[i] <= nums[j]) {
                    temp[k++] = nums[i++];
                } else {
                    temp[k++] = nums[j++];
                }
            }

            while (i <= mid) {
                temp[k++] = nums[i++];
            }

            while (j <= high) {
                temp[k++] = nums[j++];
            }

            for (int index = low; index <= high; index++) {
                nums[index] = temp[index - low];
            }
        }
    }

    public static void main(String[] args) {
        int[] nums = {5, 2, 3, 1};

        int[] sortedNums = sortArray(nums);

        System.out.println(Arrays.toString(sortedNums));
    }
}


Q 4. Move all zeroes to end of array**

Given an array of random numbers, Push all the zero’s of a given array to the end of the array. For example, if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same. Expected time complexity is O(n) and extra space is O(1).

CODE______________________________________________________________________________________________________________

public class MoveZeroesToEnd {

    public static void moveZeroesToEnd(int[] nums) {
        int count = 0;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[count++] = nums[i];
            }
        }

        for (int i = count; i < nums.length; i++) {
            nums[i] = 0;
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 0, 4, 3, 0, 5, 0};

        moveZeroesToEnd(nums);

        System.out.println(Arrays.toString(nums));
    }
}

Q 5. Rearrange array in alternating positive & negative items with O(1) extra space**

Given an **array of positive** and **negative numbers**, arrange them in an **alternate** fashion such that every positive number is followed by a negative and vice-versa maintaining the **order of appearance**. The number of positive and negative numbers need not be equal. If there are more positive numbers they appear at the end of the array. If there are more negative numbers, they too appear at the end of the array.

CODE___________________________________________________________________________________________________________

public class RearrangeArrayInAlternatingPositiveAndNegativeItems {

    public static void rearrange(int[] nums) {
        int i = 0;
        int j = 1;

        while (i < nums.length && j < nums.length) {
            if (nums[i] > 0 && nums[j] < 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;

                i += 2;
                j += 2;
            } else {
                if (nums[i] < 0) {
                    i++;
                } else {
                    j++;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, -4, -1, 4};

        rearrange(nums);

        System.out.println(Arrays.toString(nums));
    }
}



6. Merge two sorted arrays**

Given two sorted arrays, the task is to merge them in a sorted manner.


> Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8} 
Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

Input: arr1[] = { 5, 8, 9}, arr2[] = {4, 7, 8}
Output: arr3[] = {4, 5, 7, 8, 8, 9}
> 
CODE_____________________________________________________________________________________________________________

public class MergeSortedArrays {

    public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {
        int[] arr3 = new int[arr1.length + arr2.length];

        int i = 0;
        int j = 0;
        int k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                arr3[k++] = arr1[i++];
            } else {
                arr3[k++] = arr2[j++];
            }
        }

        while (i < arr1.length) {
            arr3[k++] = arr1[i++];
        }

        while (j < arr2.length) {
            arr3[k++] = arr2[j++];
        }

        return arr3;
    }

    public static void main(String[] args) {
        int[] arr1 = { 1, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8};

        int[] mergedArr = mergeSortedArrays(arr1, arr2);

        System.out.println(Arrays.toString(mergedArr));
    }
}


Q 7. **Intersection of Two Arrays**

Given two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.

CODE__________________________________________________________________________________________________________

import java.util.*;

public class IntersectionOfTwoArrays {

    public static int[] intersection(int[] nums1, int[] nums2) {

        Set<Integer> set = new HashSet<>();

        for (int num : nums1) {
            set.add(num);
        }


        int[] intersection = new int[set.size()];
        int index = 0;

        for (int num : nums2) {
            if (set.contains(num)) {
                intersection[index++] = num;
            }
        }

        return intersection;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};

        int[] intersectionArr = intersection(nums1, nums2);

        System.out.println(Arrays.toString(intersectionArr));
    }
}
