Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.


CODE____________________________________________

import java.util.Scanner;

public class FirstNonRepeatingCharacter {
    public static int firstNonRepeatingCharacter(String s) {
        int[] count = new int[26];

        
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }

        
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }

        return -1; 
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();

        int index = firstNonRepeatingCharacter(input);
        System.out.println("Index of the first non-repeating character: " + index);
    }
}



Question 2

Given a **circular integer array** `nums` of length `n`, return *the maximum possible sum of a non-empty **subarray** of* `nums`.

A **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.

A **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.

**Example 1:**

```
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

```



```
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

```
CODE___________________________________________________________________________________________________________________

public class MaximumCircularSubarraySum {
    public static int maxSubarraySumCircular(int[] nums) {
        int maxSum1 = kadane(nums); 
        int totalSum = 0;
        for (int num : nums) {
            totalSum += num;
        }

        int[] negatedNums = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            negatedNums[i] = -nums[i];
        }

        int maxSum2 = kadane(negatedNums); 
        int maxCircularSum = maxSum2 + totalSum; 

        if (maxCircularSum == 0) {
            return maxSum1; 
        }

        return Math.max(maxSum1, maxCircularSum);
    }

   
    private static int kadane(int[] nums) {
        int maxSum = nums[0];
        int currentSum = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] nums = {1, -2, 3, -2};
        int result = maxSubarraySumCircular(nums);
        System.out.println("Maximum circular subarray sum: " + result);
    }
}


Question 3**

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:

- If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.
- Otherwise, they will **leave it** and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `ith` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `jth` student in the initial queue (`j = 0` is the front of the queue). Return *the number of students that are unable to eat.*


CODE _________________________________________________________________________________________________________________________


import java.util.LinkedList;
import java.util.Queue;

public class UnableToEatSandwich {
    public static int countStudents(int[] students, int[] sandwiches) {
        int unableToEat = 0;
        Queue<Integer> queue = new LinkedList<>();

        for (int student : students) {
            queue.offer(student);
        }

        int stackTop = 0; 

        while (!queue.isEmpty()) {
            if (queue.peek() == sandwiches[stackTop]) {
                queue.poll(); 
                stackTop++; 
                unableToEat = 0; 
            } else {
                queue.offer(queue.poll()); 


Question 4**

You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.

Implement the `RecentCounter` class:

- `RecentCounter()` Initializes the counter with zero recent requests.
- `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.

It is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous 
Question 6**

You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

1. Take the top card of the deck, reveal it, and take it out of the deck.
2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

Return *an ordering of the deck that would reveal the cards in increasing order*.

**Note** that the first entry in the answer is considered to be the top of the deck.


CODE____________________________________________________________________________________________________


import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class RevealCardsInIncreasingOrder {
    public static int[] deckRevealedIncreasing(int[] deck) {
        int n = deck.length;
        Arrays.sort(deck); 

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            queue.offer(i);  
       }

        Stack<Integer> stack = new Stack<>();
        int[] result = new int[n];

        for (int card : deck) {
            result[queue.poll()] = card;
           if (!queue.isEmpty()) {
                queue.offer(queue.poll()); 

            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] deck = {17, 13, 11, 2, 3, 5, 7};
        int[] result = deckRevealedIncreasing(deck);
        System.out.println("Ordering of the deck: " + Arrays.toString(result));
    }
}



