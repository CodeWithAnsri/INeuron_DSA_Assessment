Question-1

Given a binary tree, your task is to find subtree with maximum sum in tree.

Examples:

Input1 :       

       1

     /   \

   2      3

  / \    / \

4   5  6   7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

       1

     /    \

  -2      3

  / \    /  \

4   5  -6   2

Output2 : 7

Subtree with largest sum is :

 -2

 / \

4   5

Also, entire tree sum is also 7.


code________________________________________________________________________________________________________


import java.util.*;

public class FindSubSum {

    public static int findMaxSum(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int maxSum = root.data;
        int leftSum = findMaxSum(root.left);
        int rightSum = findMaxSum(root.right);

        maxSum = Math.max(maxSum, leftSum + rightSum + root.data);

        return maxSum;
    }

    public static TreeNode findSubtreeWithMaximumSum(TreeNode root) {
        int maxSum = findMaxSum(root);
        TreeNode subtree = root;

        for (TreeNode child : root.children) {
            int childSum = findMaxSum(child);
            if (childSum > maxSum) {
                maxSum = childSum;
                subtree = child;
            }
        }

        return subtree;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        TreeNode subtree = findSubtreeWithMaximumSum(root);

        System.out.println(subtree.data);
    }
}


 Question-2

Construct the BST (Binary Search Tree) from its given level order traversal.

Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10

CODE________________________________________________________________________________________________________________

import java.util.*;

public class ConstructBSTFromLevelOrderTraversal {

    public static TreeNode constructBST(int[] arr) {
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode root = new TreeNode(arr[0]);
        queue.add(root);

        int i = 1;
        while (!queue.isEmpty() && i < arr.length) {
            TreeNode node = queue.poll();

            int leftChild = arr[i++];
            if (leftChild != -1) {
                TreeNode left = new TreeNode(leftChild);
                node.left = left;
                queue.add(left);
            }

            int rightChild = arr[i++];
            if (rightChild != -1) {
                TreeNode right = new TreeNode(rightChild);
                node.right = right;
                queue.add(right);
            }
        }

        return root;
    }

    public static void main(String[] args) {
        int[] arr = {7, 4, 12, 3, 6, 8, 1, 5, 10};

        TreeNode root = constructBST(arr);

        System.out.println(root);
    }
}
