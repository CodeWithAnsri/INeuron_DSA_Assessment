Q 1. Given an arrayÂ ofÂ intervalsÂ whereÂ intervals[i] = [starti, endi], merge all overlapping intervals, and returnÂ an array of the non-overlapping intervals that cover all the intervals in the input.

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].



CODE _____________________________________________________________________________________________________________________

import java.util.*;

public class MergeIntervals {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        List<Interval> intervals = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int start = scanner.nextInt();
            int end = scanner.nextInt();
            intervals.add(new Interval(start, end));
        }

        List<Interval> mergedIntervals = mergeIntervals(intervals);

        for (Interval interval : mergedIntervals) {
            System.out.println(interval.start + " " + interval.end);
        }
    }

    private static List<Interval> mergeIntervals(List<Interval> intervals) {
        List<Interval> mergedIntervals = new ArrayList<>();

        intervals.sort(Comparator.comparingInt(interval -> interval.start));

        Interval currentInterval = intervals.get(0);
        for (int i = 1; i < intervals.size(); i++) {
            Interval nextInterval = intervals.get(i);

            if (currentInterval.end >= nextInterval.start) {
                currentInterval.end = Math.max(currentInterval.end, nextInterval.end);
            } else {
                mergedIntervals.add(currentInterval);
                currentInterval = nextInterval;
            }
        }

        mergedIntervals.add(currentInterval);

        return mergedIntervals;
    }

    private static class Interval {
        int start;
        int end;

        public Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
}


ğŸ’¡ 2. Sort Colors

Given an arrayÂ `nums`Â withÂ `n`Â objects colored red, white, or blue, sort themÂ **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**Â so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integersÂ `0`,Â `1`, andÂ `2`Â to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

CODE _______________________________________________________________________________________________________________

import java.util.*;

public class SortColors {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        sortColors(nums);

        for (int i = 0; i < n; i++) {
            System.out.print(nums[i] + " ");
        }
    }

    private static void sortColors(int[] nums) {
        int i = 0;
        int j = nums.length - 1;
        int k = 0;

        while (i <= j) {
            if (nums[i] == 0) {
                nums[i] = nums[k];
                nums[k] = 0;
                k++;
                i++;
            } else if (nums[i] == 2) {
                nums[i] = nums[j];
                nums[j] = 2;
                j--;
            } else {
                i++;
            }
        }
    }
}

 3. **First Bad Version Solution**

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you haveÂ `n`Â versionsÂ `[1, 2, ..., n]`Â and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an APIÂ `bool isBadVersion(version)`Â which returns whetherÂ `version`Â is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

CODE________________________________________________________________________________________________


public class FirstBadVersion {

    private static int firstBadVersion(int n) {
        int low = 1;
        int high = n;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (isBadVersion(mid)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return low;
    }

    public static void main(String[] args) {
        int n = 5;
        int bad = 4;

        int firstBadVersion = firstBadVersion(n);

        System.out.println(firstBadVersion);
    }

    private static boolean isBadVersion(int version) {
        return version >= bad;
    }
}


Q 4. Given an integer arrayÂ `nums`, returnÂ *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, returnÂ `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

CODE ___________________________________________________________________________________________________

public class MaximumGap {

    public static int maxGap(int[] nums) {
        if (nums.length < 2) {
            return 0;
        }

        int min = nums[0];
        int maxDiff = 0;

        for (int i = 1; i < nums.length; i++) {
            maxDiff = Math.max(maxDiff, nums[i] - min);
            min = Math.min(min, nums[i]);
        }

        return maxDiff;
    }

    public static void main(String[] args) {
        int[] nums = {3, 6, 9, 1};

        int maxGap = maxGap(nums);

        System.out.println(maxGap);
    }
}


Q 5. Contains Duplicate**

Given an integer arrayÂ `nums`, returnÂ `true`Â if any value appearsÂ **at least twice**Â in the array, and returnÂ `false`Â if every element is distinct.

CODE _________________________________________________________________________________________________________________

import java.util.*;

public class ContainsDuplicate {

    public static boolean containsDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<>();

        for (int num : nums) {
            if (seen.contains(num)) {
                return true;
            } else {
                seen.add(num);
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 1};

        boolean containsDuplicate = containsDuplicate(nums);

        System.out.println(containsDuplicate);
    }
}



ğŸ’¡ 6. **Minimum Number of Arrows to Burst Balloons**

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer arrayÂ `points`Â whereÂ `points[i] = [xstart, xend]`Â denotes a balloon whoseÂ **horizontal diameter**Â stretches betweenÂ `xstart`Â andÂ `xend`. You do not know the exact y-coordinates of the balloons.

Arrows can be shot upÂ **directly vertically**Â (in the positive y-direction) from different points along the x-axis. A balloon withÂ `xstart`Â andÂ `xend`Â isÂ **burst**Â by an arrow shot atÂ `x`Â ifÂ `xstart <= x <= xend`. There isÂ **no limit**Â to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the arrayÂ `points`, returnÂ *theÂ **minimum**Â number of arrows that must be shot to burst all balloons*.

CODE__________________________________________________________________________________________________________________________

import java.util.*;

public class MinimumArrowsToBurstBalloons {

    public static int minimumArrows(int[][] points) {
        
        Arrays.sort(points, (a, b) -> Integer.compare(b[1], a[1]));

        int arrows = 0;
        int end = points[0][1];

        for (int[] point : points) {
            if (point[0] > end) {
                arrows++;
                end = point[1];
            }
        }

        return arrows;
    }

    public static void main(String[] args) {
        int[][] points = {{10, 16}, {2, 8}, {1, 6}, {7, 12}};

        int minimumArrows = minimumArrows(points);

        System.out.println(minimumArrows);
    }
}


 Q 8 . 132 Pattern**

Given an array ofÂ `n`Â integersÂ `nums`, aÂ **132 pattern**Â is a subsequence of three integersÂ `nums[i]`,Â `nums[j]`Â andÂ `nums[k]`Â such thatÂ `i < j < k`Â andÂ `nums[i] < nums[k] < nums[j]`.

ReturnÂ `true`Â *if there is aÂ **132 pattern**Â in*Â `nums`*, otherwise, return*Â `false`*.*

CODE____________________________________________________________________________________________________________


import java.util.*;

public class 132Pattern {

    public static boolean find132Pattern(int[] nums) {
       
        Stack<Integer> stack = new Stack<>();

        
        int min = Integer.MAX_VALUE;

        for (int num : nums) {
            
            if (num <= min) {
                min = num;
            } else {
                
                while (!stack.isEmpty() && num > stack.peek()) {
                    if (num < stack.peek()) {
                        return true;
                    } else {
                        min = stack.pop();
                    }
                }
            }

            
            stack.push(num);
        }

        return false;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4};

        boolean is132Pattern = find132Pattern(nums);

        System.out.println(is132Pattern);
    }
}
