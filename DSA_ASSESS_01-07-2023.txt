 Question-1

You are given a binary tree. The binary tree is represented using the TreeNode class. Each TreeNode has an integer value and left and right children, represented using the TreeNode class itself. Convert this binary tree into a binary search tree.

Input:

        10

       /   \

     2      7

   /   \

 8      4

Output:

        8

      /   \

    4     10

  /   \

2      7

import java.util.*;

public class conBinSerTree {

    public static TreeNode conBinSerTree(TreeNode root) {
        if (root == null) {
            return null;
        }

        TreeNode left = conBinSerTree(root.left);
        TreeNode right = conBinSerTree(root.right);

        if (left != null && left.data > root.data) {
            swap(root, left);
        }

        if (right != null && right.data <= root.data) {
            swap(root, right);
        }

        return root;
    }

    private static void swap(TreeNode a, TreeNode b) {
        int temp = a.data;
        a.data = b.data;
        b.data = temp;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(8);
        root.left.right = new TreeNode(4);

        TreeNode convertedTree = conBinSerTree(root);

        System.out.println(convertedTree);
    }
}

Q 3. Question-3:

Write a program to convert a binary tree to a doubly linked list.

Input:

        10

       /   \

     5     20

           /   \

        30     35

Output:

5 10 30 20 35

CODE______________________________________________________________________________________________________

import java.util.*;

public class ConDoublyLinkdList {

    private static class Node {
        int data;
        Node prev;
        Node next;

        public Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    public static Node ConDoublyLinkdList(Node root) {
        Node head = null;
        Node prev = null;

        Stack<Node> stack = new Stack<>();
        stack.push(root);

        while (!stack.isEmpty()) {
            Node curr = stack.pop();

            if (head == null) {
                head = curr;
            } else {
                prev.next = curr;
                curr.prev = prev;
            }

            prev = curr;

            if (curr.right != null) {
                stack.push(curr.right);
            }

            if (curr.left != null) {
                stack.push(curr.left);
            }
        }

        return head;
    }

    public static void main(String[] args) {
        Node root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(20);
        root.right.left = new Node(30);
        root.right.right = new Node(35);

        Node dll = ConDoublyLinkdList(root);

        Node curr = dll;
        while (curr != null) {
            System.out.println(curr.data);
            curr = curr.next;
        }
    }
}

Q 4 <aside>
ðŸ’¡ Question-4:

Write a program to connect nodes at the same level.

Input:

        1

      /   \

    2      3

  /   \   /   \

4     5 6    7

Output:

1 â†’ -1

2 â†’ 3

3 â†’ -1

4 â†’ 5

5 â†’ 6

6 â†’ 7

7 â†’ -1

CODE____________________________________________________________________________________________________________


import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left, right, next;

    Node(int item) {
        data = item;
        left = right = next = null;
    }
}

public class ConnectNodesSameLevel {
    Node root;

    void connectNodes() {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            Node prev = null;

            for (int i = 0; i < size; i++) {
                Node curr = queue.poll();

                if (prev != null)
                    prev.next = curr;

                prev = curr;

                if (curr.left != null)
                    queue.add(curr.left);

                if (curr.right != null)
                    queue.add(curr.right);
            }

            prev.next = null; 
        }
    }

    void printLevelOrder() {
        Node node = root;
        while (node != null) {
            Node temp = node;
            while (temp != null) {
                System.out.print(temp.data + " â†’ ");
                temp = temp.next;
            }
            System.out.println("-1");
            node = node.left;
        }
    }

    public static void main(String[] args) {
        ConnectNodesSameLevel tree = new ConnectNodesSameLevel();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);

        tree.connectNodes();
        tree.printLevelOrder();
    }
}

